plugins {
  id 'java'
  id 'org.springframework.boot' version '3.5.6'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.hibernate.orm' version '6.6.29.Final'
  id 'org.graalvm.buildtools.native' version '0.10.6'
  id 'net.ltgt.errorprone' version '4.3.0'
  id 'net.ltgt.nullaway' version '2.3.0'
  id 'com.diffplug.spotless' version '8.0.0'
  id 'checkstyle'
  id 'jacoco'
}

group = 'com.quezap'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(25)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

configurations.all {
  resolutionStrategy {
    force 'com.google.guava:guava:33.5.0-jre'
  }
}

dependencies {
  errorprone 'com.google.errorprone:error_prone_core:2.42.0'
  errorprone 'com.uber.nullaway:nullaway:0.12.10'
  compileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.4.0'
  testCompileOnly 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.4.0'

  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.shell:spring-shell-starter:3.4.1'

  // Code generator
  implementation 'io.github.kwaadpepper:serial-int-caster:2.0.0'

  // Profanity filter
  implementation 'com.modernmt.text:profanity-filter:1.0.1'

  // For ARGON 2
  implementation 'org.bouncycastle:bcprov-jdk18on:1.82'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'org.postgresql:postgresql'

  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// hibernate {
// 	enhancement {
// 		enableAssociationManagement = true
// 	}
// }

// --- Configuration Error Prone / NullAway (Conditionnelle) ---
def enableNullAway = project.hasProperty('nullaway') && project.property('nullaway') == 'true'

tasks.withType(JavaCompile).configureEach {
  options.errorprone {
    if (enableNullAway) {
      check('NullAway', net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
      option('NullAway:AnnotatedPackages', 'com.quezap')
      option('TreatGeneratedAsUnannotated', 'true')
    } else {
      // Si NullAway n'est pas activé, spécifier quand même les packages
      // mais le désactiver avec OFF
      option('NullAway:AnnotatedPackages', 'com.quezap')
      check('NullAway', net.ltgt.gradle.errorprone.CheckSeverity.OFF)
    }
  }

  if (enableNullAway) {
    options.compilerArgs << '-Werror'
  }

  options.compilerArgs << "-Xlint:deprecation"
}

// --- Configuration Spotless ---
spotless {
  // * Java
  java {
    // * Utiliser Google Java Format
    googleJavaFormat('1.29.0')
    removeUnusedImports()
    importOrder(
        'java',
        'javax',
        'org.springframework',
        'com.quezap',
        '#',
        '',
        )
    formatAnnotations()
    target('**/*.java')
    targetExclude('**/build/**', '**/generated/**')
  }

  // * Scripts Gradle Groovy
  groovyGradle {

// // 1. Configure le formatteur avec la signature valide
//     def greclipseConfig = greclipse('4.31')

//     // 2. CORRECTION: Utilisez 'dependency' (au singulier).
//     // Cette méthode est prévue pour ajouter des dépendances une par une.
//     greclipseConfig.dependency 'org.eclipse.platform:org.eclipse.osgi:3.19.0'

    target('**/*.gradle')
    targetExclude('**/build/**')

    leadingTabsToSpaces(2)
  }
}

// * Intègre Spotless dans 'check'
tasks.named('check') {
  dependsOn('spotlessCheck', 'checkstyleMain', 'checkstyleTest')
}

// Configuration Checkstyle
checkstyle {
  // Utiliser une version récente de l'outil Checkstyle
  toolVersion = '12.0.0'

  // Chemin vers le fichier de configuration principal (checkstyle.xml)
  configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")

  // Propriétés de configuration (nécessaires si vous utilisez des suppressions)
  configProperties = [
    // Chemin vers le filtre de suppression (checkstyle-suppressions.xml)
    'org.checkstyle.google.suppressionfilter.config': file("${rootDir}/config/checkstyle/checkstyle-suppressions.xml"),
  ]
}

// Configuration des tâches de compilation/vérification (pour Main et Test)
tasks.withType(Checkstyle).configureEach {
  enabled = fileTree('src/main/java').files.size() > 0

  reports {
    // Exiger le rapport HTML (facile à lire)
    html.required = true
    // Désactiver le rapport XML (facultatif)
    xml.required = false
  }
}

// Désactiver Checkstyle pour les fichiers générés par AOT
tasks.named('checkstyleAot') {
  enabled = false
}

tasks.named('checkstyleAotTest') {
  enabled = false
}

// --- Tâches diverses ---

graalvmNative {
  binaries.configureEach {
    buildArgs.add('-march=compatibility')
  }
}

// --- Configuration JaCoCo (Couverture de Code) ---
jacoco {
  toolVersion = "0.8.13"
}

tasks.named('jacocoTestReport') {
  dependsOn tasks.named('test')

  reports {
    html.required = true
    html.outputLocation = layout.buildDirectory.dir('reports/jacoco/test/html')

    xml.required = true
    xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')

    csv.required = false
  }
}

// --- Configuration de l'exécution des tests (pour JaCoCo) ---
tasks.named('test', Test) {
  useJUnitPlatform()

  jacoco {
    destinationFile = layout.buildDirectory.file('jacoco/test.exec').get().asFile
    classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
  }
}

project.afterEvaluate {
  tasks.named('jacocoTestReport').configure {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
        // Exclure les classes Spring Boot standards
        '**/com/quezap/*Application.class',
        // Exclure les classes de configuration/interfaces DTO sans logique
        '**/*Configuration.class',
        '**/*Dto.class',
        '**/*MapperImpl.class',
        '**/*Constants.class',
        // Exclure les classes gérées par l'ORM si elles n'ont que des getters/setters
        '**/domain/entities/**',
      ])
    }))
  }
}

bootRun {
  standardInput = System.in
}
